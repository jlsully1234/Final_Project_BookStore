package book.store.entity;

import java.util.HashSet;
import java.util.Set;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

/* @Entity: This annotation is part of the Java Persistence API (JPA). It 
 * indicates that the class Customer is an entity and is mapped to a database table.
 * 
 * @Data: generates all the boilerplate code that is typically associated with simple Java objects
 * 
 * public class BookStore {: This line declares a public Java class named BookStore
*/

@Entity
@Data
public class BookStore {
	
/* @Id: This annotation indicates that the field bookStore Id is the primary key of the entity
 * 
 * @GeneratedValue(strategy = GenerationType.IDENTITY): This annotation specifies that the value
 * of the primary key should be automatically generated by the database
 */
	
@Id	
@GeneratedValue(strategy=GenerationType.IDENTITY)
private Long bookStoreId;  //The unique identifier for each book store


/* The code defines part of an entity class with fields for storing a book store ID, name, address, 
 * city, state, zip code , and phone number. 
 */

private String bookStoreName;
private String bookStoreAddress;
private String bookStoreCity;
private String bookStoreState;
private String bookStoreZip;
private String bookStorePhone;

/* @EqualsAndHashCode.Exclude: This annotation is from the Lombok library. It indicates that the 
 * customers field should be excluded from the equals and hashCode methods generated by Lombok.
 * 
 * @ToString.Exclude: Also from Lombok, this annotation excludes the customers field from the 
 * toString method generated by Lombok. 
 * 
 * @ManyToMany(cascade = CascadeType.PERSIST): This JPA annotation specifies a many-to-many 
 * relationship between the current entity and the Customer entity. The cascade = CascadeType.
 * PERSIST part means that when the current entity is persisted, any associated Customer entities
 * that are not already persisted will also be persisted.
 * 
 * @JoinTable: This annotation defines the join table that maps the many-to-many relationship.
 * It specifies the table name (book_store_customer) and the join columns: book_store_id and 
 * customer Id
 * 
 * inverseJoinColumns = @JoinColumn(name = "customer_id"): This defines the foreign key column
 * in the join table that references the primary key of the Customer entity.
 * 
 * private Set<Customer> customers = new HashSet<>();: This declares a private field named customers
 * of type Set<Customer>, initialized as a new HashSet. This collection will hold the Customer entities
 * associated with the current entity in a many-to-many relationship.
 * 
 */


@EqualsAndHashCode.Exclude
@ToString.Exclude
@ManyToMany(cascade = CascadeType.PERSIST)
@JoinTable(name = "book_store_customer", 
joinColumns = @JoinColumn (name = "book_store_id"),
inverseJoinColumns = @JoinColumn (name = "customer_id"))
private Set<Customer>customers = new HashSet<>();

/* @EqualsAndHashCode.Exclude: This annotation is from the Lombok library. It indicates that the publisher field
 * should be excluded from the equals() and hashCode() methods generated by Lombok. 
 * 
 * @ToString.Exclude: Also from Lombok, this annotation specifies that the publisher field should be excluded
 * from the toString() method generated by Lombok.
 * 
 * @ManyToOne(cascade = CascadeType.ALL): This is a JPA annotation that defines a many-to-one relationship between 
 * the current entity and the Publisher entity. The cascade = CascadeType.ALL part means that all cascade operations
 * (persist, merge, remove, refresh, detach) will be applied to the publisher entity when they are applied to the owning entity.
 * 
 * @JoinColumn(name = "publisher_id"): This JPA annotation specifies the foreign key column (publisher_id) in the database table
 * that will be used to join the current entity with the Publisher entity. 
 * 
 * private Publisher publisher;: This line declares a private field named publisher of type Publisher. This field represents
 * the relationship between the current entity and the Publisher entity.
 */

@EqualsAndHashCode.Exclude
@ToString.Exclude
@ManyToOne(cascade = CascadeType.ALL)
@JoinColumn(name = "publisher_id")
private Publisher publisher;

}  
